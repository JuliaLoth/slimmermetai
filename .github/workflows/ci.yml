name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: slimmermetai_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        coverage: xdebug

    - name: Validate composer.json
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --optimize-autoloader

    - name: Setup environment
      run: |
        cp ENV_PRODUCTION_EXAMPLE.txt .env.testing
        echo "APP_ENV=testing" >> .env.testing
        echo "SKIP_DB=false" >> .env.testing
        echo "DB_HOST=127.0.0.1" >> .env.testing
        echo "DB_NAME=slimmermetai_test" >> .env.testing
        echo "DB_USER=root" >> .env.testing
        echo "DB_PASS=root" >> .env.testing

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h127.0.0.1 -P3306 -uroot -proot --silent; do
          sleep 1
        done

    - name: Create test database
      run: mysql -h127.0.0.1 -P3306 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS slimmermetai_test;"

    - name: Run migrations
      run: php bin/migrate.php migrate
      env:
        APP_ENV: testing

    - name: Run code style check
      run: composer run cs:check

    - name: Run static analysis
      run: composer run analyse

    - name: Run tests with coverage
      run: composer run test:coverage
      env:
        APP_ENV: testing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/clover.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Security check
      run: |
        # Install symfony security checker
        curl -L https://github.com/sensiolabs/security-checker/releases/latest/download/security-checker_linux_amd64 -o security-checker
        chmod +x security-checker
        ./security-checker security:check composer.lock

  frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: public_html/assets/

  deploy:
    needs: [test, security, frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install production dependencies
      run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: public_html/assets/

    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='coverage' \
          --exclude='.env*' \
          --exclude='*.md' \
          .

    - name: Deploy to production (placeholder)
      run: |
        echo "üöÄ Deployment package created: deployment.tar.gz"
        echo "üì¶ Package size: $(du -h deployment.tar.gz | cut -f1)"
        echo "üéØ Ready for production deployment"
        # Hier zou je de daadwerkelijke deployment logica toevoegen
        # bijvoorbeeld via SSH, FTP, of hosting provider API's

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi 