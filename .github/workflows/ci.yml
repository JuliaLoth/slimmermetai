name: CI/CD Pipeline
# 
# Docker Registry Authentication Configuration:
# This pipeline uses GHCR_PAT (Personal Access Token) instead of GITHUB_TOKEN 
# for Docker registry authentication to resolve permission issues with GitHub Container Registry.
# 
# Required secret: GHCR_PAT (with write:packages and read:packages permissions)
#
# CI/CD Pipeline Fixes (June 10, 2025):
# - Fixed phpenv configuration issues by using setup-php ini-values directly
# - Enhanced code style checks with better PHPCBF auto-fixing
# - Added PHP environment validation steps
# - Improved error handling and reporting
#

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  architecture-checks:
    runs-on: ubuntu-latest
    name: Architecture & Legacy Code Checks
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Make scripts executable
      run: |
        chmod +x scripts/check-public-php.sh
        chmod +x scripts/database-migration-tool.php
        chmod +x scripts/database-modernization-final.php
        chmod +x scripts/generate-architecture-docs.php

    - name: Check for disallowed PHP files in public_html
      run: |
        echo "üîç Checking for PHP files in public_html (except index.php)..."
        ./scripts/check-public-php.sh

    - name: Scan for legacy database usage
      run: |
        echo "üîç Scanning for legacy database patterns..."
        php scripts/database-migration-tool.php scan
      continue-on-error: true

    - name: Generate database modernization report
      run: |
        echo "üìä Generating database modernization report..."
        php scripts/database-modernization-final.php || echo "‚ö†Ô∏è Modernization script completed with warnings"
      continue-on-error: true

    - name: Generate architecture documentation
      run: |
        echo "üìù Generating architecture documentation..."
        php scripts/generate-architecture-docs.php
      continue-on-error: true

    - name: Archive reports
      uses: actions/upload-artifact@v4
      with:
        name: architecture-reports
        path: |
          docs/database-migration-report.md
          docs/database_modernization_report.json
          docs/REPOSITORIES.md
          docs/CONTROLLERS.md
          docs/MIGRATION_STATUS.md
        retention-days: 30
      if: always()

    - name: Comment PR with architecture status
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          let comment = "## üèóÔ∏è Architecture Check Results\n\n";
          
          // Check for PHP files violation
          try {
            const { execSync } = require('child_process');
            execSync('./scripts/check-public-php.sh', { stdio: 'inherit' });
            comment += "‚úÖ **PHP Files Check**: No disallowed PHP files in public_html\n";
          } catch (error) {
            comment += "‚ùå **PHP Files Check**: Disallowed PHP files detected in public_html\n";
          }
          
          comment += "\nüìä **Database Architecture**: Legacy database pattern scan completed. Check artifacts for detailed reports.\n";
          comment += "\nüí° **Repository Pattern Benefits**: See docs/ARCHITECTURE_RATIONALE.md for why we use repository pattern.\n";
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: slimmermetai_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        coverage: xdebug
        ini-values: |
          zend.assertions=1
          assert.active=1
          memory_limit=512M

    - name: Validate composer.json
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --optimize-autoloader

    - name: Setup environment
      run: |
        cp ENV_PRODUCTION_EXAMPLE.txt .env.testing
        echo "APP_ENV=testing" >> .env.testing
        echo "SKIP_DB=false" >> .env.testing
        echo "DB_HOST=127.0.0.1" >> .env.testing
        echo "DB_NAME=slimmermetai_test" >> .env.testing
        echo "DB_USER=root" >> .env.testing
        echo "DB_PASS=root" >> .env.testing

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h127.0.0.1 -P3306 -uroot -proot --silent; do
          sleep 1
        done

    - name: Create test database
      run: mysql -h127.0.0.1 -P3306 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS slimmermetai_test;"

    - name: Run migrations
      run: php bin/migrate.php migrate
      env:
        APP_ENV: testing

    - name: Ensure phpcs is executable
      run: chmod +x ./vendor/bin/phpcs

    - name: Grant execute permissions for PHP tools
      run: |
        chmod +x ./vendor/bin/phpcbf
        chmod +x ./vendor/bin/phpstan
        chmod +x ./vendor/bin/phpunit

    - name: Auto-fix code style issues with PHPCBF
      run: |
        echo "üîß Auto-fixing code style issues..."
        ./vendor/bin/phpcbf --standard=PSR12 src/ tests/ || echo "PHPCBF completed with fixes"
        composer run cs:fix || echo "Additional CS fixes completed"

    - name: Check for remaining code style issues
      run: |
        echo "üîç Checking remaining code style issues..."
        if ! composer run cs:check-errors-only; then
          echo "‚ùå Critical code style errors found!"
          exit 1
        fi
        echo "‚úÖ No critical code style errors"

    - name: Run full code style check for reporting (warnings allowed)
      run: |
        echo "üìã Running full code style check for reporting..."
        if composer run cs:check; then
          echo "‚úÖ Code fully compliant with PSR12"
        else
          echo "‚ö†Ô∏è Some PSR12 warnings detected (not blocking CI)"
        fi

    - name: Validate PHP setup
      run: |
        php -v
        php -m
        echo "PHP configuration file: $(php --ini)"

    - name: Verify PHP configuration
      run: |
        echo "üîß Verifying PHP test configuration..."
        php -i | grep -E "(memory_limit|assert\.active|zend\.assertions)"
        echo "‚úÖ PHP configuration verified"

    - name: Run static analysis
      run: composer run analyse

    - name: Run tests with coverage
      run: composer run test:coverage
      env:
        APP_ENV: testing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/clover.xml
        flags: unittests
        name: codecov-umbrella

  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests & Build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run JavaScript tests
      run: npm run test:run

    - name: Run JavaScript tests with coverage
      run: npm run test:coverage

    - name: Upload JS coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/clover.xml
        flags: frontend
        name: codecov-frontend

    - name: Build frontend assets
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: public_html/assets/

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Image Build
    needs: [frontend-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: public_html/assets/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate Docker image summary
      run: |
        echo "## üê≥ Docker Image Built Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`ghcr.io/${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8080:80 ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  security:
    runs-on: ubuntu-latest
    name: Security Scans
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for secret scanning

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Security check with composer audit
      run: |
        composer audit --format=table || true
        
    - name: Alternative security check (if audit fails)
      run: |
        if [ -f "composer.lock" ]; then
          echo "‚úÖ composer.lock found"
          composer audit --composer-lock=./composer.lock --no-dev || echo "‚ö†Ô∏è Security audit completed with warnings"
        else
          echo "‚ùå composer.lock not found!"
          exit 1
        fi

    - name: Install TruffleHog for secret scanning
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run TruffleHog secret scan
      run: |
        echo "üîç Scanning for secrets in git history..."
        trufflehog git file://. --branch=main --max-depth=50 --no-verification --json > secrets-scan.json || true
        
        # Check if any secrets were found
        if [ -s secrets-scan.json ]; then
          echo "‚ö†Ô∏è Potential secrets found:"
          cat secrets-scan.json
          echo "::warning::Potential secrets detected. Review the scan results."
        else
          echo "‚úÖ No secrets detected in repository"
        fi

    - name: GitHub Secret Scanning
      run: |
        echo "‚ÑπÔ∏è GitHub native secret scanning is active on this repository"
        echo "Check the Security tab in GitHub for any detected secrets"

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          secrets-scan.json
        retention-days: 30
      if: always()

  deploy-staging:
    needs: [test, frontend-test, docker-build, security, architecture-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying Docker image to staging environment"
        echo "Image: ghcr.io/${{ github.repository }}:develop"
        echo "Environment: STAGING"
        echo "Branch: develop"
        # Hier zou je docker pull en docker run commando's uitvoeren
        # docker pull ghcr.io/${{ github.repository }}:develop
        # docker stop slimmermetai-staging || true
        # docker rm slimmermetai-staging || true
        # docker run -d --name slimmermetai-staging -p 8080:80 ghcr.io/${{ github.repository }}:develop

    - name: Run staging smoke tests
      run: |
        echo "üß™ Running smoke tests on staging environment"
        # Hier zouden health checks en basic functionality tests komen
        # curl -f http://staging.slimmermetai.nl/health || exit 1
        # curl -f http://staging.slimmermetai.nl/api/health || exit 1

  deploy-production:
    needs: [test, frontend-test, docker-build, security, architecture-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying Docker image to production environment"
        echo "Image: ghcr.io/${{ github.repository }}:latest"
        echo "Environment: PRODUCTION"
        echo "Branch: main"
        # Hier zou je de daadwerkelijke deployment logica toevoegen
        # docker pull ghcr.io/${{ github.repository }}:latest
        # docker stop slimmermetai-production || true
        # docker rm slimmermetai-production || true
        # docker run -d --name slimmermetai-production -p 80:80 ghcr.io/${{ github.repository }}:latest

    - name: Run production health checks
      run: |
        echo "üè• Running health checks on production environment"
        # Hier zouden production health checks komen
        # curl -f https://slimmermetai.nl/health || exit 1
        # curl -f https://slimmermetai.nl/api/health || exit 1

    - name: Run database migrations
      run: |
        echo "üóÑÔ∏è Running database migrations"
        # docker exec slimmermetai-production php bin/migrate.php migrate

  notify:
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ Production deployment successful!"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "‚úÖ Staging deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi 