<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="JwtService.php" path="\Infrastructure\Security">
    <totals>
      <lines total="102" comments="14" code="88" executable="34" executed="32" percent="94.12"/>
      <methods count="8" tested="7" percent="87.50"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Infrastructure\Security\JwtService" start="8" executable="34" executed="32" crap="16.05">
      <namespace name="App\Infrastructure\Security"/>
      <method name="__construct" signature="__construct(App\Infrastructure\Config\Config $config, ?string $secret, ?int $expiration)" start="19" end="23" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="generate" signature="generate(array $payload, ?int $exp): string" start="25" end="45" crap="2" executable="12" executed="12" coverage="100"/>
      <method name="generateToken" signature="generateToken(array $payload, ?int $exp): string" start="50" end="53" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="verify" signature="verify(string $token): ?array" start="55" end="77" crap="8.15" executable="15" executed="13" coverage="86.666666666667"/>
      <method name="validateToken" signature="validateToken(string $token): ?array" start="82" end="85" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="sign" signature="sign(string $data): string" start="87" end="90" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="base64url" signature="base64url(string $data): string" start="92" end="95" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="base64urlDecode" signature="base64urlDecode(string $data): string" start="97" end="100" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="21">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testMissingAuthorizationHeaderReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidAuthorizationFormatReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testDifferentAuthorizationSchemes"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testResponseHeaders"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testLoginWithWrongPasswordFails"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testRegistrationWithWeakPasswordFails"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testRegistrationWithExistingEmailFails"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testLogoutSucceeds"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testGetCurrentUserWithValidPayload"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testPasswordStrengthValidation"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testPasswordHashingAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="22">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testMissingAuthorizationHeaderReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidAuthorizationFormatReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testDifferentAuthorizationSchemes"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testResponseHeaders"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testLoginWithWrongPasswordFails"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testRegistrationWithWeakPasswordFails"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testRegistrationWithExistingEmailFails"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testLogoutSucceeds"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testGetCurrentUserWithValidPayload"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testPasswordStrengthValidation"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testPasswordHashingAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="27">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="30">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="31">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="32">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="36">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="37">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="38">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="39">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="42">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="43">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="44">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="52">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="57">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="58">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="59">
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
      </line>
      <line nr="61">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="62">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="63">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="64">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
      </line>
      <line nr="66">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="67">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="70">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="71">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
      </line>
      <line nr="73">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="76">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="84">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="89">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="94">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testInvalidTokenHandling"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="99">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
      <line nr="40">
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullLoginFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testFullRegistrationFlowWithRealServices"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenVerificationWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testTokenRefreshWithRealJWT"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testJWTTokenGenerationAndVerification"/>
        <covered by="Tests\Integration\AuthServiceIntegrationTest::testCompleteUserLifecycle"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testJwtTokenGenerationAndValidationFlow"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testExpiredTokenDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testTokenTamperingDetection"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testMultipleTokensWithDifferentPayloads"/>
        <covered by="Tests\Integration\JwtServiceIntegrationTest::testRefreshTokenFlow"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Infrastructure\Security</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Infrastructure\Config\Config</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\Security\JwtServiceInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7"/>
      <line no="8">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JwtService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JwtServiceInterface</token>
      </line>
      <line no="9">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="10">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$secret</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiration</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$algo</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'HS256'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="15">
        <token name="T_DOC_COMMENT">     * JwtService constructor.</token>
      </line>
      <line no="16">
        <token name="T_DOC_COMMENT">     * De configuratie wordt via Dependency Injection meegegeven zodat er geen</token>
      </line>
      <line no="17">
        <token name="T_DOC_COMMENT">     * statische aanroepen meer nodig zijn.</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Config</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$secret</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiration</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">secret</token>
        <token name="T_WHITESPACE">     </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$secret</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">get</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'jwt_secret'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'change_me'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">expiration</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiration</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">get</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'jwt_expiration'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">3600</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="24"/>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">generate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exp</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">base64url</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">json_encode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'typ'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'JWT'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'alg'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">algo</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28"/>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Only set expiration if not already present in payload</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exp'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$expTime</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">time</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exp</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">expiration</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exp'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expTime</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="34"/>
      <line no="35">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Set other standard claims if not present</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_merge</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'iat'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">time</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'nbf'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">time</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'jti'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bin2hex</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">random_bytes</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">8</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Payload values take precedence</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$payloadEnc</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">base64url</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">json_encode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$signature</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">sign</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">.</token>
        <token name="T_VARIABLE">$payloadEnc</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">.</token>
        <token name="T_VARIABLE">$payloadEnc</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">.</token>
        <token name="T_VARIABLE">$signature</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="46"/>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">     * Alias for generate() method for compatibility</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">generateToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exp</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">generate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exp</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="54"/>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">verify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$parts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$parts</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">3</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$h</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$p</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$s</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$parts</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$calcSig</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">sign</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_VARIABLE">$h</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">.</token>
        <token name="T_VARIABLE">$p</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">hash_equals</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$calcSig</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$s</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">json_decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">base64urlDecode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$p</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exp'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exp'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">time</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'nbf'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'nbf'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">time</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="78"/>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="80">
        <token name="T_DOC_COMMENT">     * Alias for verify() method for compatibility with UserController</token>
      </line>
      <line no="81">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">verify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="86"/>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sign</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">base64url</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">hash_hmac</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sha256'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">secret</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="91"/>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">base64url</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rtrim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strtr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">base64_encode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'+/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-_'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'='</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">base64urlDecode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">base64_decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strtr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-_'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'+/'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="101">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="102"/>
    </source>
  </file>
</phpunit>
