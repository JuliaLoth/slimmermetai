<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="AuthRepository.php" path="\Infrastructure\Repository">
    <totals>
      <lines total="411" comments="59" code="352" executable="169" executed="134" percent="79.29"/>
      <methods count="31" tested="23" percent="74.19"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Infrastructure\Repository\AuthRepository" start="14" executable="169" executed="134" crap="62.99">
      <namespace name="App\Infrastructure\Repository"/>
      <method name="__construct" signature="__construct(App\Infrastructure\Database\DatabaseInterface $database)" start="16" end="18" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="findUserByEmail" signature="findUserByEmail(App\Domain\ValueObject\Email $email): ?App\Domain\Entity\User" start="20" end="28" crap="2" executable="5" executed="5" coverage="100"/>
      <method name="findUserByEmailAndPassword" signature="findUserByEmailAndPassword(App\Domain\ValueObject\Email $email, string $hashedPassword): ?App\Domain\Entity\User" start="30" end="40" crap="12" executable="4" executed="0" coverage="0"/>
      <method name="createUser" signature="createUser(string $name, App\Domain\ValueObject\Email $email, string $hashedPassword, string $role): int" start="42" end="61" crap="2" executable="11" executed="11" coverage="100"/>
      <method name="updateLastLogin" signature="updateLastLogin(int $userId): bool" start="63" end="69" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="createEmailVerificationToken" signature="createEmailVerificationToken(int $userId, string $token, DateTimeInterface $expiresAt): bool" start="71" end="77" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="verifyEmailToken" signature="verifyEmailToken(string $token): ?App\Domain\Entity\User" start="79" end="117" crap="3.11" executable="22" executed="17" coverage="77.272727272727"/>
      <method name="createPasswordResetToken" signature="createPasswordResetToken(int $userId, string $token, DateTimeInterface $expiresAt): bool" start="119" end="139" crap="3" executable="12" executed="12" coverage="100"/>
      <method name="findPasswordResetToken" signature="findPasswordResetToken(string $token): ?array" start="141" end="150" crap="1" executable="5" executed="5" coverage="100"/>
      <method name="deleteUsedToken" signature="deleteUsedToken(string $token): bool" start="152" end="158" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="updatePassword" signature="updatePassword(int $userId, string $hashedPassword): bool" start="160" end="166" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="deleteExpiredTokens" signature="deleteExpiredTokens(): int" start="168" end="175" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="getUserLoginHistory" signature="getUserLoginHistory(int $userId, int $limit): array" start="177" end="183" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="logLoginAttempt" signature="logLoginAttempt(string $email, bool $success, string $ipAddress, string $reason): void" start="185" end="195" crap="3" executable="6" executed="6" coverage="100"/>
      <method name="getFailedLoginAttempts" signature="getFailedLoginAttempts(string $email, \DateTimeInterface|int $since): int" start="197" end="211" crap="2" executable="7" executed="7" coverage="100"/>
      <method name="findByEmail" signature="findByEmail(string $email): ?App\Domain\Entity\User" start="218" end="221" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="findById" signature="findById(int $id): ?App\Domain\Entity\User" start="226" end="234" crap="2" executable="5" executed="5" coverage="100"/>
      <method name="create" signature="create(array $userData): App\Domain\Entity\User" start="239" end="254" crap="2.01" executable="9" executed="8" coverage="88.888888888889"/>
      <method name="validatePasswordResetToken" signature="validatePasswordResetToken(string $token): bool" start="259" end="263" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="deletePasswordResetToken" signature="deletePasswordResetToken(string $token): bool" start="268" end="271" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="resetFailedLoginAttempts" signature="resetFailedLoginAttempts(string $email): bool" start="276" end="282" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="blacklistToken" signature="blacklistToken(string $token, int $userId, DateTimeInterface $expiresAt): bool" start="287" end="297" crap="2" executable="6" executed="0" coverage="0"/>
      <method name="isTokenBlacklisted" signature="isTokenBlacklisted(string $token): bool" start="302" end="313" crap="1" executable="7" executed="7" coverage="100"/>
      <method name="logUserAction" signature="logUserAction(int $userId, string $action, array $metadata): bool" start="318" end="331" crap="2" executable="11" executed="0" coverage="0"/>
      <method name="updateLastActivity" signature="updateLastActivity(int $userId): bool" start="336" end="342" crap="2" executable="4" executed="0" coverage="0"/>
      <method name="getLoginHistory" signature="getLoginHistory(int $userId, int $limit): array" start="347" end="350" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="recordLoginAttempt" signature="recordLoginAttempt(string $email, bool $success, string $ipAddress): void" start="355" end="358" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="deactivateUser" signature="deactivateUser(int $userId): bool" start="363" end="369" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="activateUser" signature="activateUser(int $userId): bool" start="374" end="380" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="createWithTransaction" signature="createWithTransaction(array $userData): App\Domain\Entity\User" start="385" end="397" crap="2.31" executable="7" executed="4" coverage="57.142857142857"/>
      <method name="hydrateUser" signature="hydrateUser(array $row): App\Domain\Entity\User" start="399" end="409" crap="1" executable="8" executed="8" coverage="100"/>
    </class>
    <coverage>
      <line nr="18">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithNonExistentUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdatePassword"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdateLastLogin"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindPasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testDeletePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testGetUserLoginHistory"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testGetLoginHistory"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testDeactivateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testActivateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testDeleteExpiredTokens"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testMissingAuthorizationHeaderReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidAuthorizationFormatReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testInvalidTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testExpiredTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testDifferentAuthorizationSchemes"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testResponseHeaders"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdatePasswordWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdateLastLoginWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="22">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithNonExistentUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
      </line>
      <line nr="23">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithNonExistentUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
      </line>
      <line nr="24">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithNonExistentUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
      </line>
      <line nr="27">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithNonExistentUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
      </line>
      <line nr="44">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="47">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="48">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="49">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="52">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
      </line>
      <line nr="54">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
      </line>
      <line nr="56">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
      </line>
      <line nr="57">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="58">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="59">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="65">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdateLastLogin"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdateLastLoginWithRealDatabase"/>
      </line>
      <line nr="66">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdateLastLogin"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdateLastLoginWithRealDatabase"/>
      </line>
      <line nr="67">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdateLastLogin"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdateLastLoginWithRealDatabase"/>
      </line>
      <line nr="73">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="74">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="75">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="81">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="85">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="86">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="90">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="93">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="99">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="100">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="101">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="105">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="106">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="107">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="110">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="112">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="122">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="123">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
      </line>
      <line nr="125">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="126">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
      </line>
      <line nr="130">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="131">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="132">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="135">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="136">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="137">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="143">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindPasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="144">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindPasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="148">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindPasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="154">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeletePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="155">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeletePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="156">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeletePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="162">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdatePassword"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdatePasswordWithRealDatabase"/>
      </line>
      <line nr="163">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdatePassword"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdatePasswordWithRealDatabase"/>
      </line>
      <line nr="164">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdatePassword"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdatePasswordWithRealDatabase"/>
      </line>
      <line nr="170">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeleteExpiredTokens"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="171">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeleteExpiredTokens"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="174">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeleteExpiredTokens"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="179">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetUserLoginHistory"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testGetLoginHistory"/>
      </line>
      <line nr="180">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetUserLoginHistory"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testGetLoginHistory"/>
      </line>
      <line nr="181">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetUserLoginHistory"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testGetLoginHistory"/>
      </line>
      <line nr="188">
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="189">
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="191">
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="192">
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="193">
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="200">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="201">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
      </line>
      <line nr="205">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="206">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="207">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="210">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="220">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithNonExistentUser"/>
      </line>
      <line nr="228">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="229">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="230">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="233">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="241">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="242">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="243">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="244">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="246">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="248">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="249">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="253">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="261">
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
      </line>
      <line nr="262">
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
      </line>
      <line nr="270">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeletePasswordResetToken"/>
      </line>
      <line nr="304">
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="306">
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="307">
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="309">
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="312">
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="349">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetLoginHistory"/>
      </line>
      <line nr="357">
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
      </line>
      <line nr="365">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeactivateUser"/>
      </line>
      <line nr="366">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeactivateUser"/>
      </line>
      <line nr="367">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeactivateUser"/>
      </line>
      <line nr="376">
        <covered by="Tests\Unit\AuthRepositoryTest::testActivateUser"/>
      </line>
      <line nr="377">
        <covered by="Tests\Unit\AuthRepositoryTest::testActivateUser"/>
      </line>
      <line nr="378">
        <covered by="Tests\Unit\AuthRepositoryTest::testActivateUser"/>
      </line>
      <line nr="387">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="390">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="391">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="392">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="401">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="402">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="403">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="404">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="405">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="406">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="407">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="25">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithNonExistentUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
      </line>
      <line nr="50">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithDuplicateEmailFails"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testTransactionRollbackOnError"/>
      </line>
      <line nr="68">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdateLastLogin"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdateLastLoginWithRealDatabase"/>
      </line>
      <line nr="76">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateEmailVerificationToken"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="89">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="91">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="102">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="108">
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
      <line nr="133">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="138">
        <covered by="Tests\Unit\AuthRepositoryTest::testCreatePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="147">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindPasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="149">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindPasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidatePasswordResetToken"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testValidateExpiredPasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreatePasswordResetTokenWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="157">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeletePasswordResetToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="165">
        <covered by="Tests\Unit\AuthRepositoryTest::testUpdatePassword"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testUpdatePasswordWithRealDatabase"/>
      </line>
      <line nr="172">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeleteExpiredTokens"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testDeleteExpiredTokensWithRealDatabase"/>
      </line>
      <line nr="182">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetUserLoginHistory"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testGetLoginHistory"/>
      </line>
      <line nr="194">
        <covered by="Tests\Unit\AuthRepositoryTest::testLogLoginAttempt"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testRecordLoginAttempt"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="208">
        <covered by="Tests\Unit\AuthRepositoryTest::testGetFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="231">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
      </line>
      <line nr="308">
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="310">
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenBlacklisted"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testIsTokenNotBlacklisted"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testValidTokenPassesThrough"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testBlacklistedTokenReturnsUnauthorized"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testCaseInsensitiveBearerScheme"/>
        <covered by="Tests\Unit\Middleware\AuthMiddlewareIntegrationTest::testTokenWithoutExpiration"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="368">
        <covered by="Tests\Unit\AuthRepositoryTest::testDeactivateUser"/>
      </line>
      <line nr="379">
        <covered by="Tests\Unit\AuthRepositoryTest::testActivateUser"/>
      </line>
      <line nr="408">
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByEmailWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindUserByEmailWithEmailValueObject"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testFindByIdWithExistingUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUser"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testCreateUserWithTransaction"/>
        <covered by="Tests\Unit\AuthRepositoryTest::testVerifyEmailToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testCreateUserWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testFindUserByEmailWithRealDatabase"/>
        <covered by="Tests\Integration\AuthRepositoryIntegrationTest::testVerifyEmailTokenWithRealDatabase"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Infrastructure\Repository</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\Repository\AuthRepositoryInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DomainAuthRepositoryInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Infrastructure\Repository\AuthRepositoryInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\Entity\User</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\ValueObject\Email</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Infrastructure\Database\DatabaseInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PDOException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AuthRepository</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DomainAuthRepositoryInterface</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AuthRepositoryInterface</token>
      </line>
      <line no="15">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DatabaseInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$database</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="19"/>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">User</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SELECT * FROM users WHERE email = ? AND deleted_at IS NULL"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26"/>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hydrateUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="29"/>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">findUserByEmailAndPassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">User</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Note: Deze methode is deprecated - gebruik password_verify() in de service laag</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34"/>
      <line no="35">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">password_verify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getPasswordHash</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="38"/>
      <line no="39">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$role</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">beginTransaction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45"/>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">query</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT INTO users (name, email, password, role, created_at, updated_at) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">                </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$role</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51"/>
      <line no="52">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">lastInsertId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">commit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="55"/>
      <line no="56">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">PDOException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">rollBack</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">updateLastLogin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE users SET last_login_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="70"/>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createEmailVerificationToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT INTO email_tokens (user_id, token, type, expires_at, created_at) VALUES (?, ?, 'verification', ?, CURRENT_TIMESTAMP)"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d H:i:s'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="78"/>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">verifyEmailToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">User</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">beginTransaction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="82"/>
      <line no="83">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Vind actieve token</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$tokenRow</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SELECT et.*, u.* FROM email_tokens et </token>
      </line>
      <line no="87">
        <token name="T_CONSTANT_ENCAPSED_STRING">                 JOIN users u ON et.user_id = u.id </token>
      </line>
      <line no="88">
        <token name="T_CONSTANT_ENCAPSED_STRING">                 WHERE et.token = ? AND et.type = 'verification' </token>
      </line>
      <line no="89">
        <token name="T_CONSTANT_ENCAPSED_STRING">                 AND et.expires_at &gt; CURRENT_TIMESTAMP AND et.used_at IS NULL"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">                </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="92"/>
      <line no="93">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$tokenRow</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">rollBack</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="97"/>
      <line no="98">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Markeer token als gebruikt</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE email_tokens SET used_at = CURRENT_TIMESTAMP WHERE token = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">                </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103"/>
      <line no="104">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Markeer gebruiker als geverifieerd</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE users SET email_verified_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">                </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenRow</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="109"/>
      <line no="110">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">commit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111"/>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hydrateUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokenRow</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">PDOException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">rollBack</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="118"/>
      <line no="119">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createPasswordResetToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Voor backward compatibility: als alleen userId wordt meegegeven, genereer token en expiry</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bin2hex</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">random_bytes</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">32</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeImmutable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'+1 hour'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="128"/>
      <line no="129">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Eerst oude tokens invalideren</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE email_tokens SET used_at = CURRENT_TIMESTAMP WHERE user_id = ? AND type = 'password_reset' AND used_at IS NULL"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="134"/>
      <line no="135">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT INTO email_tokens (user_id, token, type, expires_at, created_at) VALUES (?, ?, 'password_reset', ?, CURRENT_TIMESTAMP)"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d H:i:s'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="140"/>
      <line no="141">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">findPasswordResetToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SELECT et.*, u.email, u.name FROM email_tokens et </token>
      </line>
      <line no="145">
        <token name="T_CONSTANT_ENCAPSED_STRING">             JOIN users u ON et.user_id = u.id </token>
      </line>
      <line no="146">
        <token name="T_CONSTANT_ENCAPSED_STRING">             WHERE et.token = ? AND et.type = 'password_reset' </token>
      </line>
      <line no="147">
        <token name="T_CONSTANT_ENCAPSED_STRING">             AND et.expires_at &gt; CURRENT_TIMESTAMP AND et.used_at IS NULL"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="151"/>
      <line no="152">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">deleteUsedToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE email_tokens SET used_at = CURRENT_TIMESTAMP WHERE token = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="159"/>
      <line no="160">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">updatePassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE users SET password = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="167"/>
      <line no="168">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">deleteExpiredTokens</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$stmt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">query</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="171">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"DELETE FROM email_tokens WHERE expires_at &lt; CURRENT_TIMESTAMP OR used_at IS NOT NULL"</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="173"/>
      <line no="174">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stmt</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">rowCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="176"/>
      <line no="177">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getUserLoginHistory</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$limit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">10</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetchAll</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SELECT * FROM login_history WHERE user_id = ? ORDER BY created_at DESC LIMIT ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$limit</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="184"/>
      <line no="185">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">logLoginAttempt</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$success</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ipAddress</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$reason</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Find user_id for this email to maintain consistency</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="189">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="190"/>
      <line no="191">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT INTO login_history (user_id, email, success, ip_address, user_agent, reason, created_at) VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$success</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ipAddress</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$_SERVER</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_USER_AGENT'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$reason</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="196"/>
      <line no="197">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getFailedLoginAttempts</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeInterface</token>
        <token name="T_PIPE">|</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$since</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Support voor int (timestamp) of DateTimeInterface</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$since</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$since</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeImmutable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">@</token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$since</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="203"/>
      <line no="204">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Simple datetime comparison - works with both SQLite and MySQL</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SELECT COUNT(*) as count FROM login_history WHERE email = ? AND success = 0 AND created_at &gt;= ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$since</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d H:i:s'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="209"/>
      <line no="210">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'count'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="212"/>
      <line no="213">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// Additional methods for test compatibility and expanded functionality</token>
      </line>
      <line no="214"/>
      <line no="215">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="216">
        <token name="T_DOC_COMMENT">     * Alias for findUserByEmail for test compatibility</token>
      </line>
      <line no="217">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="218">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">findByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">User</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="220">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="221">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="222"/>
      <line no="223">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="224">
        <token name="T_DOC_COMMENT">     * Alias for findUserById</token>
      </line>
      <line no="225">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="226">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">findById</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">User</token>
      </line>
      <line no="227">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SELECT * FROM users WHERE id = ? AND deleted_at IS NULL"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="230">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="231">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="232"/>
      <line no="233">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hydrateUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="235"/>
      <line no="236">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="237">
        <token name="T_DOC_COMMENT">     * Alias for createUser for test compatibility</token>
      </line>
      <line no="238">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="239">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">create</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">User</token>
      </line>
      <line no="240">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="241">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$userData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$password</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$role</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="245"/>
      <line no="246">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">createUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$password</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$role</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="247"/>
      <line no="248">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findById</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="249">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\RuntimeException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Failed to create user or retrieve created user"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="252"/>
      <line no="253">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="255"/>
      <line no="256">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="257">
        <token name="T_DOC_COMMENT">     * Validate password reset token</token>
      </line>
      <line no="258">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validatePasswordResetToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="260">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$tokenData</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findPasswordResetToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenData</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="263">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="264"/>
      <line no="265">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="266">
        <token name="T_DOC_COMMENT">     * Delete password reset token</token>
      </line>
      <line no="267">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="268">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">deletePasswordResetToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="269">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="270">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">deleteUsedToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="271">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="272"/>
      <line no="273">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="274">
        <token name="T_DOC_COMMENT">     * Reset failed login attempts counter for email</token>
      </line>
      <line no="275">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="276">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">resetFailedLoginAttempts</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="277">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="278">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// For SQLite/MySQL compatibility, we don't actually delete records</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Instead we could implement a flag or timestamp approach</token>
      </line>
      <line no="280">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// For now, this is mainly for API consistency</token>
      </line>
      <line no="281">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="283"/>
      <line no="284">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="285">
        <token name="T_DOC_COMMENT">     * Blacklist a JWT token with user context and expiration</token>
      </line>
      <line no="286">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="287">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">blacklistToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Calculate token hash for storage efficiency (tokens can be long)</token>
      </line>
      <line no="290">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$tokenHash</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hash</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sha256'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="291"/>
      <line no="292">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="293">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT INTO blacklisted_tokens (token_hash, user_id, expires_at, blacklisted_at) VALUES (?, ?, ?, CURRENT_TIMESTAMP) </token>
      </line>
      <line no="294">
        <token name="T_CONSTANT_ENCAPSED_STRING">             ON CONFLICT(token_hash) DO NOTHING"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenHash</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d H:i:s'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="296">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="298"/>
      <line no="299">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="300">
        <token name="T_DOC_COMMENT">     * Check if token is blacklisted (override existing method)</token>
      </line>
      <line no="301">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="302">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isTokenBlacklisted</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="303">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="304">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$tokenHash</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hash</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sha256'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="305"/>
      <line no="306">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="307">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SELECT COUNT(*) as count FROM blacklisted_tokens </token>
      </line>
      <line no="308">
        <token name="T_CONSTANT_ENCAPSED_STRING">             WHERE token_hash = ? AND (expires_at IS NULL OR expires_at &gt; CURRENT_TIMESTAMP)"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="309">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenHash</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="310">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="311"/>
      <line no="312">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'count'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="313">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="314"/>
      <line no="315">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="316">
        <token name="T_DOC_COMMENT">     * Log user actions for audit trail</token>
      </line>
      <line no="317">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="318">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">logUserAction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$action</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$metadata</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="319">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="320">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="321">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT INTO user_actions (user_id, action, metadata, ip_address, user_agent, created_at) </token>
      </line>
      <line no="322">
        <token name="T_CONSTANT_ENCAPSED_STRING">             VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="323">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="324">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="325">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$action</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="326">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">json_encode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$metadata</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="327">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$metadata</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'ip_address'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$_SERVER</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'REMOTE_ADDR'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="328">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$metadata</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_agent'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$_SERVER</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_USER_AGENT'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="329">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="330">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="331">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="332"/>
      <line no="333">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="334">
        <token name="T_DOC_COMMENT">     * Update user's last activity timestamp</token>
      </line>
      <line no="335">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="336">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">updateLastActivity</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="337">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="338">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="339">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE users SET last_activity_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="340">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="341">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="342">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="343"/>
      <line no="344">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="345">
        <token name="T_DOC_COMMENT">     * Get login history (alias for getUserLoginHistory)</token>
      </line>
      <line no="346">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="347">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getLoginHistory</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$limit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">10</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="348">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="349">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getUserLoginHistory</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$limit</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="351"/>
      <line no="352">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="353">
        <token name="T_DOC_COMMENT">     * Record login attempt (alias for logLoginAttempt)</token>
      </line>
      <line no="354">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="355">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">recordLoginAttempt</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$success</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ipAddress</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="356">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="357">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logLoginAttempt</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$success</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ipAddress</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="358">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="359"/>
      <line no="360">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="361">
        <token name="T_DOC_COMMENT">     * Deactivate user account</token>
      </line>
      <line no="362">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="363">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">deactivateUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="364">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="365">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="366">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE users SET active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="368">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="369">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="370"/>
      <line no="371">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="372">
        <token name="T_DOC_COMMENT">     * Activate user account</token>
      </line>
      <line no="373">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="374">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">activateUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="375">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="376">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">execute</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="377">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"UPDATE users SET active = 1, updated_at = CURRENT_TIMESTAMP WHERE id = ?"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="378">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="379">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="380">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="381"/>
      <line no="382">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="383">
        <token name="T_DOC_COMMENT">     * Create user within transaction for test purposes</token>
      </line>
      <line no="384">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="385">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createWithTransaction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$userData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">User</token>
      </line>
      <line no="386">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="387">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">beginTransaction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="388"/>
      <line no="389">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="390">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">create</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$userData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="391">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">commit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="392">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="393">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="394">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">rollBack</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="395">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="396">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="397">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="398"/>
      <line no="399">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hydrateUser</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">User</token>
      </line>
      <line no="400">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="401">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">User</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="402">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="403">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="404">
        <token name="T_WHITESPACE">            </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="405">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="406">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="407">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeImmutable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'created_at'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'now'</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="408">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="409">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="410">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="411"/>
    </source>
  </file>
</phpunit>
