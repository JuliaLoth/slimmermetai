<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="AuthController.php" path="\Http\Controller\Api">
    <totals>
      <lines total="420" comments="33" code="387" executable="215" executed="135" percent="62.79"/>
      <methods count="12" tested="3" percent="25.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Http\Controller\Api\AuthController" start="17" executable="215" executed="135" crap="238.33">
      <namespace name="App\Http\Controller\Api"/>
      <method name="__construct" signature="__construct(App\Domain\Repository\AuthRepositoryInterface $authRepository, App\Domain\Service\PasswordHasherInterface $passwordHasher, App\Domain\Security\JwtServiceInterface $jwtService, App\Infrastructure\Database\DatabaseInterface $database)" start="19" end="25" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="handle" signature="handle(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="27" end="43" crap="9" executable="13" executed="13" coverage="100"/>
      <method name="register" signature="register(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="45" end="103" crap="4" executable="35" executed="35" coverage="100"/>
      <method name="login" signature="login(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="105" end="182" crap="13.49" executable="51" executed="25" coverage="49.019607843137"/>
      <method name="verifyEmail" signature="verifyEmail(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="184" end="211" crap="4.21" executable="17" executed="13" coverage="76.470588235294"/>
      <method name="forgotPassword" signature="forgotPassword(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="213" end="246" crap="4.70" executable="17" executed="11" coverage="64.705882352941"/>
      <method name="resetPassword" signature="resetPassword(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="248" end="283" crap="7.10" executable="16" executed="11" coverage="68.75"/>
      <method name="refreshToken" signature="refreshToken(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="285" end="289" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="logout" signature="logout(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="291" end="323" crap="23.46" executable="14" executed="3" coverage="21.428571428571"/>
      <method name="me" signature="me(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="325" end="370" crap="19.85" executable="25" executed="9" coverage="36"/>
      <method name="validateRegistration" signature="validateRegistration(array $data): array" start="372" end="401" crap="8.12" executable="16" executed="14" coverage="87.5"/>
      <method name="performanceStats" signature="performanceStats(Psr\Http\Message\ServerRequestInterface $request): Psr\Http\Message\ResponseInterface" start="404" end="418" crap="6" executable="9" executed="0" coverage="0"/>
    </class>
    <coverage>
      <line nr="25">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="29">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="30">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="33">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="34">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="35">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="36">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="37">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="38">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="39">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="40">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="41">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="48">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="51">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="52">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="53">
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="56">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="59">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="60">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="61">
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
      </line>
      <line nr="65">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="68">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="69">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="75">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="76">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="78">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="83">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="84">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="85">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="86">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="87">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="90">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="91">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="92">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="94">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="95">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="96">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="97">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="100">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="101">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="108">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="110">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="114">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="118">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="119">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="120">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="123">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="135">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="137">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="139">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="140">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="141">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="142">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="143">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="146">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="150">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="151">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="152">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="153">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="154">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="179">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="180">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="187">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="189">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="193">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="195">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="199">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="200">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="202">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="203">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="204">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="216">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="218">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="222">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="223">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="225">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="233">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="234">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="236">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="240">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="241">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="251">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="253">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="257">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="259">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="264">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="269">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="272">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="275">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="277">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="278">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="295">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="297">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="299">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="329">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="331">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="335">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="338">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="342">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="344">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="345">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
      </line>
      <line nr="367">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
      </line>
      <line nr="368">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
      </line>
      <line nr="374">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="376">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="377">
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="380">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="381">
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="384">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="386">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="387">
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="390">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="392">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="393">
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="396">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="397">
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="400">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="32">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="42">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="70">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="71">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="72">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
      </line>
      <line nr="88">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="93">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="98">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="99">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
      </line>
      <line nr="121">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="144">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="155">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="201">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="205">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="206">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="207">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
      </line>
      <line nr="242">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
      <line nr="279">
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Http\Controller\Api</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\Repository\AuthRepositoryInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\ValueObject\Email</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\Service\PasswordHasherInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\Security\JwtServiceInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Infrastructure\Database\DatabaseInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Http\Response\ApiResponse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Psr\Http\Message\ResponseInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Psr\Http\Message\ServerRequestInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Psr\Http\Server\RequestHandlerInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16"/>
      <line no="17">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AuthController</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RequestHandlerInterface</token>
      </line>
      <line no="18">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AuthRepositoryInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$authRepository</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PasswordHasherInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$passwordHasher</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JwtServiceInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jwtService</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DatabaseInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$database</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="26"/>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">handle</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getUri</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getPath</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMethod</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31"/>
      <line no="32">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MATCH">match</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/register'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">register</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/login'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">login</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/verify-email'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">verifyEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/forgot-password'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">forgotPassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/reset-password'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">resetPassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/refresh'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">refreshToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/me'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'GET'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">me</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$path</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/api/auth/logout'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$method</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logout</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DEFAULT">default</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Endpoint niet gevonden'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">404</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="44"/>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">register</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParsedBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49"/>
      <line no="50">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Validatie</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateRegistration</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Validatiefout'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">422</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="55"/>
      <line no="56">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57"/>
      <line no="58">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Check if user already exists</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$existingUser</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$existingUser</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Dit e-mailadres is al in gebruik'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">409</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="63"/>
      <line no="64">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Hash password</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">passwordHasher</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hash</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66"/>
      <line no="67">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Create user</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">createUser</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'firstName'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'lastName'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$hashedPassword</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73"/>
      <line no="74">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Create email verification token</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bin2hex</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">random_bytes</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">32</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeImmutable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'+24 hours'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77"/>
      <line no="78">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">createEmailVerificationToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$userId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="79"/>
      <line no="80">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// TODO: Send verification email</token>
      </line>
      <line no="81"/>
      <line no="82">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Generate JWT for immediate login</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$jwtToken</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">jwtService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">generateToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getRole</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="89"/>
      <line no="90">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Registratie succesvol. Controleer je e-mail om je account te bevestigen.'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'token'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jwtToken</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getRole</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Er is een fout opgetreden bij de registratie'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="104"/>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">login</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParsedBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="109"/>
      <line no="110">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'E-mail en wachtwoord zijn verplicht'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">422</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="113"/>
      <line no="114">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115"/>
      <line no="116">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Check for too many failed attempts BEFORE validating credentials</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// This prevents brute force attacks</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$failedAttempts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getFailedLoginAttempts</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">                </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeImmutable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-1 hour'</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="122"/>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$failedAttempts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">5</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Log the rate-limited attempt</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logLoginAttempt</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getServerParams</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'REMOTE_ADDR'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'rate_limited'</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Te veel mislukte inlogpogingen. Probeer het over een uur opnieuw.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">429</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134"/>
      <line no="135">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="136"/>
      <line no="137">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">passwordHasher</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">verify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getPasswordHash</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Log failed login attempt</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logLoginAttempt</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getServerParams</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'REMOTE_ADDR'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'invalid_credentials'</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="145"/>
      <line no="146">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Ongeldige inloggegevens'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">401</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="148"/>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Log successful login</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logLoginAttempt</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getServerParams</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'REMOTE_ADDR'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'success'</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="156"/>
      <line no="157">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Update last login and reset failed attempts</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">updateLastLogin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">resetFailedLoginAttempts</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="160"/>
      <line no="161">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Generate JWT</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$jwtToken</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">jwtService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">generateToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getRole</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'login_time'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">time</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Add login timestamp for token validation</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="168"/>
      <line no="169">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Inloggen succesvol'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="171">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'token'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jwtToken</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getRole</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Er is een fout opgetreden bij het inloggen'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="183"/>
      <line no="184">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">verifyEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParsedBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="188"/>
      <line no="189">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'token'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Verificatietoken is verplicht'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">422</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="192"/>
      <line no="193">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">verifyEmailToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'token'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194"/>
      <line no="195">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Ongeldige of verlopen verificatietoken'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="198"/>
      <line no="199">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'E-mailadres succesvol geverifieerd'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verified'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Er is een fout opgetreden bij de e-mailverificatie'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="212"/>
      <line no="213">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">forgotPassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="214">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParsedBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="217"/>
      <line no="218">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'E-mailadres is verplicht'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">422</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="220">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="221"/>
      <line no="222">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="223">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="224"/>
      <line no="225">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="226">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Don't reveal if user exists or not for security</token>
      </line>
      <line no="227">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Als dit e-mailadres bekend is, hebben we een herstellink verstuurd.'</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="230">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="231"/>
      <line no="232">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Create password reset token</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bin2hex</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">random_bytes</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">32</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTimeImmutable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'+1 hour'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="235"/>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">createPasswordResetToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expiresAt</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="237"/>
      <line no="238">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// TODO: Send password reset email</token>
      </line>
      <line no="239"/>
      <line no="240">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="241">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Als dit e-mailadres bekend is, hebben we een herstellink verstuurd.'</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Er is een fout opgetreden'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="245">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="246">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="247"/>
      <line no="248">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">resetPassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="249">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParsedBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="252"/>
      <line no="253">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'token'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Token en nieuw wachtwoord zijn verplicht'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">422</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="255">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="256"/>
      <line no="257">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$tokenData</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findPasswordResetToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'token'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="258"/>
      <line no="259">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$tokenData</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="260">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Ongeldige of verlopen hersteltoken'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="262"/>
      <line no="263">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Validate new password</token>
      </line>
      <line no="264">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">8</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="265">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Wachtwoord moet minimaal 8 tekens lang zijn'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">422</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="266">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="267"/>
      <line no="268">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Hash new password</token>
      </line>
      <line no="269">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">passwordHasher</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hash</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="270"/>
      <line no="271">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Update password</token>
      </line>
      <line no="272">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">updatePassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_VARIABLE">$tokenData</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hashedPassword</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="273"/>
      <line no="274">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Mark token as used</token>
      </line>
      <line no="275">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">deleteUsedToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'token'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="276"/>
      <line no="277">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="278">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Wachtwoord succesvol gewijzigd'</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="280">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="281">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Er is een fout opgetreden bij het wijzigen van het wachtwoord'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="283">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="284"/>
      <line no="285">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">refreshToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="286">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="287">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// TODO: Implement refresh token logic</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Refresh token functionaliteit nog niet ge&#xEF;mplementeerd'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">501</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="290"/>
      <line no="291">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">logout</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="292">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="293">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="294">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Extract token from Authorization header</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHeaderLine</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Authorization'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="296"/>
      <line no="297">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">str_starts_with</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Bearer '</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="298">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Allow logout without token (client-side cleanup)</token>
      </line>
      <line no="299">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Succesvol uitgelogd'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="300">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="301"/>
      <line no="302">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">7</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="303"/>
      <line no="304">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Validate token format and get payload</token>
      </line>
      <line no="305">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">jwtService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="306"/>
      <line no="307">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="308">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Add token to blacklist to prevent reuse</token>
      </line>
      <line no="309">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">blacklistToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exp'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">time</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">3600</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="310"/>
      <line no="311">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// Log successful logout</token>
      </line>
      <line no="312">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logUserAction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'logout'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="313">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'ip_address'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getServerParams</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'REMOTE_ADDR'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="314">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user_agent'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHeaderLine</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'User-Agent'</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="315">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="316">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="317"/>
      <line no="318">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Succesvol uitgelogd'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="319">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="320">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Even if token processing fails, allow logout for UX</token>
      </line>
      <line no="321">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Succesvol uitgelogd'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="322">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="323">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="324"/>
      <line no="325">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">me</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="326">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="327">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="328">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Extract token from Authorization header</token>
      </line>
      <line no="329">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHeaderLine</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Authorization'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="330"/>
      <line no="331">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">str_starts_with</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Bearer '</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="332">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Geen geldige autorisatie'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">401</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="333">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="334"/>
      <line no="335">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$authHeader</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">7</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="336"/>
      <line no="337">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Check if token is blacklisted</token>
      </line>
      <line no="338">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isTokenBlacklisted</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="339">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Token is ongeldig gemaakt'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">401</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="340">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="341"/>
      <line no="342">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">jwtService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="343"/>
      <line no="344">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="345">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Ongeldig token'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">401</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="346">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="347"/>
      <line no="348">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findUserByEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="349"/>
      <line no="350">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="351">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Gebruiker niet gevonden'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">404</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="352">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="353"/>
      <line no="354">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Update last activity timestamp</token>
      </line>
      <line no="355">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">authRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">updateLastActivity</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="356"/>
      <line no="357">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="358">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="359">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="360">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="361">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="362">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getRole</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="363">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verified'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isEmailVerified</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="364">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'last_login'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$user</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getLastLogin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_NULLSAFE_OBJECT_OPERATOR">?-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'c'</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="365">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="366">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="368">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Er is een fout opgetreden'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="369">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="370">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="371"/>
      <line no="372">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateRegistration</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="373">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="374">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="375"/>
      <line no="376">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'firstName'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="377">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'firstName'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Voornaam is verplicht'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="378">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="379"/>
      <line no="380">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'lastName'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="381">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'lastName'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Achternaam is verplicht'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="382">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="383"/>
      <line no="384">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="385">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'E-mailadres is verplicht'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="386">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">filter_var</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_VALIDATE_EMAIL</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="387">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Ongeldig e-mailadres'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="388">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="389"/>
      <line no="390">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="391">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Wachtwoord is verplicht'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="392">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">8</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="393">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Wachtwoord moet minimaal 8 tekens lang zijn'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="394">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="395"/>
      <line no="396">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'termsAgreement'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="397">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'termsAgreement'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Je moet akkoord gaan met de algemene voorwaarden'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="398">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="399"/>
      <line no="400">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="401">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="402"/>
      <line no="403">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// Performance monitoring endpoint (development only)</token>
      </line>
      <line no="404">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">performanceStats</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ServerRequestInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$request</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="405">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="406">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$_ENV</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'APP_ENV'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'development'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="407">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Alleen beschikbaar in development mode'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">403</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="408">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="409"/>
      <line no="410">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getPerformanceStatistics</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="411">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$slowQueries</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">database</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSlowQueries</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="412"/>
      <line no="413">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="414">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'database_performance'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stats</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="415">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'slow_queries'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_slice</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$slowQueries</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">10</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Top 10 slow queries</token>
      </line>
      <line no="416">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'total_slow_queries'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$slowQueries</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="417">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="418">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="419">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="420"/>
    </source>
  </file>
</phpunit>
