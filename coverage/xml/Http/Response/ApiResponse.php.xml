<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="ApiResponse.php" path="\Http\Response">
    <totals>
      <lines total="135" comments="30" code="105" executable="42" executed="25" percent="59.52"/>
      <methods count="10" tested="3" percent="30.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Http\Response\ApiResponse" start="15" executable="42" executed="25" crap="29.92">
      <namespace name="App\Http\Response"/>
      <method name="success" signature="success(mixed $data, ?string $message, int $statusCode): Psr\Http\Message\ResponseInterface" start="24" end="31" crap="1" executable="5" executed="5" coverage="100"/>
      <method name="error" signature="error(string $message, int $statusCode, mixed $errors): Psr\Http\Message\ResponseInterface" start="40" end="50" crap="2" executable="7" executed="7" coverage="100"/>
      <method name="validationError" signature="validationError(array $errors, string $message): Psr\Http\Message\ResponseInterface" start="53" end="56" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="notFound" signature="notFound(string $message): Psr\Http\Message\ResponseInterface" start="59" end="62" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="unauthorized" signature="unauthorized(string $message): Psr\Http\Message\ResponseInterface" start="65" end="68" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="forbidden" signature="forbidden(string $message): Psr\Http\Message\ResponseInterface" start="71" end="74" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="rateLimited" signature="rateLimited(string $message): Psr\Http\Message\ResponseInterface" start="77" end="80" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="notModified" signature="notModified(?string $etag): Psr\Http\Message\ResponseInterface" start="83" end="98" crap="6" executable="10" executed="0" coverage="0"/>
      <method name="serverError" signature="serverError(string $message, mixed $error): Psr\Http\Message\ResponseInterface" start="101" end="115" crap="4.59" executable="6" executed="4" coverage="66.666666666667"/>
      <method name="createJsonResponse" signature="createJsonResponse(array $data, int $statusCode): Psr\Http\Message\ResponseInterface" start="120" end="133" crap="1" executable="9" executed="9" coverage="100"/>
    </class>
    <coverage>
      <line nr="26">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="27">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="28">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="29">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="42">
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="43">
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="44">
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="46">
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="47">
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
      </line>
      <line nr="49">
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="105">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
      </line>
      <line nr="110">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
      </line>
      <line nr="111">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
      </line>
      <line nr="114">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
      </line>
      <line nr="122">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="123">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="124">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="125">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="126">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="127">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="130">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="132">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="30">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
      </line>
      <line nr="45">
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
      <line nr="128">
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionException"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testStatusException"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Unit\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Unit\StripeControllerTest::testConfigWithValidKey"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;empty_data&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_line_items&quot;"/>
        <covered by="Tests\Unit\StripeControllerTest::testCreateSessionWithDifferentData with data set &quot;with_metadata&quot;"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testLoginWithMissingCredentials"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testRegisterWithValidationErrors"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithoutToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testMeWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithValidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testForgotPasswordWithInvalidEmail"/>
        <covered by="Tests\Feature\AuthControllerTest::testLogout"/>
        <covered by="Tests\Feature\AuthControllerTest::testInvalidEndpoint"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testResetPasswordWithInvalidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testVerifyEmailWithValidToken"/>
        <covered by="Tests\Feature\AuthControllerTest::testRefreshTokenNotImplemented"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testCompleteUserLifecycleFromRegistrationToLogin"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testPasswordResetCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testEmailVerificationCompleteFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testMultipleFailedLoginAttempts"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testTokenBlacklistingFlow"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testUserAccountSecurity"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testDataIntegrityThroughoutJourney"/>
        <covered by="Tests\Feature\FullUserJourneyFeatureTest::testConcurrentUserOperations"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithValidItems"/>
        <covered by="Tests\Feature\StripeControllerTest::testCreateCheckoutSessionWithException"/>
        <covered by="Tests\Feature\StripeControllerTest::testStatusSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookSuccess"/>
        <covered by="Tests\Feature\StripeControllerTest::testWebhookException"/>
        <covered by="Tests\Feature\StripeControllerTest::testConfigSuccess"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testCompleteUserRegistrationJourney"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserRegistrationWithInvalidData"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testRegistrationWithExistingEmail"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testEmailVerificationFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testPasswordResetFlow"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testUserProfileUpdate"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testAccountDeletion"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testSecurityFeatures"/>
        <covered by="Tests\Feature\UserRegistrationFeatureTest::testDataValidationAndSanitization"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteRegistrationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCompleteLoginFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithValidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testMeEndpointWithInvalidToken"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testForgotPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testResetPasswordFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testEmailVerificationFlow"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testLogoutEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRegistrationValidationErrors"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testInvalidEndpoint"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testRateLimitingOnFailedLogins"/>
        <covered by="Tests\Integration\AuthControllerIntegrationTest::testCORSHeaders"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Http\Response</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Domain\Logging\ErrorLoggerInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Psr\Http\Message\ResponseInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">GuzzleHttp\Psr7\Response</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8"/>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">container</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10"/>
      <line no="11">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> * Class ApiResponse</token>
      </line>
      <line no="13">
        <token name="T_DOC_COMMENT"> * Een uniforme manier om JSON API-responses te versturen.</token>
      </line>
      <line no="14">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="15">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
      </line>
      <line no="16">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT">     * Succesvolle response.</token>
      </line>
      <line no="19">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="20">
        <token name="T_DOC_COMMENT">     * @param mixed       $data       Payload</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT">     * @param string|null $message    Optioneel bericht</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT">     * @param int         $statusCode HTTP-status (default 200)</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">success</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">200</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createJsonResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'success'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'data'</token>
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     * Foutresponse.</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     * @param string      $message    Foutmelding</token>
      </line>
      <line no="37">
        <token name="T_DOC_COMMENT">     * @param int         $statusCode HTTP-status</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT">     * @param mixed|null  $errors     Extra foutinfo</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'success'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'errors'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createJsonResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="51"/>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** Validation errors */</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validationError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Validatiefout'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">422</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="57"/>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** 404 */</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">notFound</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Resource niet gevonden'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">404</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="63"/>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** 401 */</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">unauthorized</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Ongeautoriseerde toegang'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">401</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="69"/>
      <line no="70">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** 403 */</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">forbidden</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Toegang geweigerd'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">403</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="75"/>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** 429 */</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rateLimited</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Te veel verzoeken'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">429</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81"/>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** 304 */</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">notModified</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$etag</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Content-Type'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'application/json; charset=UTF-8'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Origin'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$_SERVER</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_ORIGIN'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'*'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Methods'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'GET,POST,PUT,PATCH,DELETE,OPTIONS'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Headers'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Content-Type, Authorization, X-Requested-With'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Credentials'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'true'</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="92"/>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$etag</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'ETag'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$etag</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Response</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">304</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="99"/>
      <line no="100">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** 500 */</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">serverError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Interne serverfout'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$error</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Log the error</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">container</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">get</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ErrorLoggerInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'error'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$error</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Exception</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Silently fail if logging fails</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="109"/>
      <line no="110">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'success'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">getenv</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'APP_ENV'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'local'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$error</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'details'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$error</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createJsonResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="116"/>
      <line no="117">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="118">
        <token name="T_DOC_COMMENT">     * Creates a JSON response with proper headers</token>
      </line>
      <line no="119">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createJsonResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ResponseInterface</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Content-Type'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'application/json; charset=UTF-8'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Origin'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$_SERVER</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_ORIGIN'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'*'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Methods'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'GET,POST,PUT,PATCH,DELETE,OPTIONS'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Headers'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Content-Type, Authorization, X-Requested-With'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Access-Control-Allow-Credentials'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'true'</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="129"/>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$jsonBody</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">json_encode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JSON_UNESCAPED_UNICODE</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PIPE">|</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JSON_UNESCAPED_SLASHES</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Response</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$jsonBody</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="135"/>
    </source>
  </file>
</phpunit>
