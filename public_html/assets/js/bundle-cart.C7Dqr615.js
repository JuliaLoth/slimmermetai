console.log("[DEBUG] Cart.js file loaded and executing...");window.cartScriptLoaded=!0;window.cartLoadTime=new Date().toISOString();console.log("[DEBUG] Cart script loaded at:",window.cartLoadTime);const o={items:[],initialized:!1,init:function(e=!1){if(console.log("[Cart.init] Starting initialization..."),this.initialized&&!e){console.log("[Cart.init] Already initialized, exiting. Use forceReload=true if needed.");return}if(console.log("[Cart.init] Initialization process continues..."),this.loadFromStorage(),this.renderCartCount(),document.querySelector(".cart-section")){console.log("Op winkelwagen pagina, items worden weergegeven"),this.renderCartItems(),this.updateCartSummary();const n=document.getElementById("clear-cart-btn");n&&n.addEventListener("click",this.clearCart.bind(this))}console.log("[DEBUG] Setting up event delegation on document.body"),document.body.addEventListener("click",function(n){console.log("[DEBUG] Document body click detected:",n.target);const i=n.target.closest(".add-to-cart-btn");if(console.log("[DEBUG] Closest add-to-cart-btn:",i),i){console.log("[CART EVENT - Delegated] Add to cart button clicked:",i),n.preventDefault();const a=i.getAttribute("data-product-id"),s=i.getAttribute("data-product-type"),r=i.getAttribute("data-product-name"),c=parseFloat(i.getAttribute("data-product-price")),l=i.getAttribute("data-product-img");if(console.log("[CART EVENT - Delegated] Product data extracted:",{productId:a,productType:s,productName:r,productPrice:c,productImg:l}),!a||!r||isNaN(c)){console.error("[CART EVENT - Delegated] Incomplete product data found on button:",i),typeof showNotification=="function"?showNotification("Kon product niet toevoegen: onvolledige data.","error"):console.error("showNotification function not available");return}const d={id:a,type:s,name:r,price:c,img:l,quantity:1};console.log("[CART EVENT - Delegated] Calling Cart.addItem with:",d),o.addItem(d),console.log("[CART EVENT - Delegated] Cart.addItem call finished. Showing notification."),typeof showNotification=="function"?showNotification(`${r} is toegevoegd aan je winkelwagen!`,"success"):console.error("showNotification function not available")}});const t=document.getElementById("checkout-btn");t&&t.addEventListener("click",this.checkout.bind(this)),this.initialized=!0,console.log(`Cart geïnitialiseerd met ${this.items.length} items:`,this.items)},loadFromStorage:function(){let e=localStorage.getItem("slimmerAICart");if(!e){const t=localStorage.getItem("cart");if(t){console.log("Oude winkelwagendata gevonden, migreren naar nieuw formaat...");try{const n=JSON.parse(t);this.items=n,this.saveToStorage(),localStorage.removeItem("cart"),console.log("Migratie voltooid.");return}catch(n){console.error("Fout bij migreren van oude winkelwagendata:",n)}}}if(e)try{this.items=JSON.parse(e),console.log("Winkelwagen geladen uit localStorage:",this.items)}catch(t){console.error("Fout bij laden van winkelwagen:",t),this.items=[]}else console.log("Geen winkelwagen gevonden in localStorage"),this.items=[]},saveToStorage:function(){localStorage.setItem("slimmerAICart",JSON.stringify(this.items)),console.log("Winkelwagen opgeslagen in localStorage")},addItem:function(e){console.log("[addItem] Function started. Item to add:",e);const t=this.items.find(n=>n.id===e.id);console.log("[addItem] Existing item check complete. Found:",t),t?(console.log("[addItem] Item exists, increasing quantity."),t.quantity+=e.quantity):(console.log("[addItem] Item is new, pushing to items array."),this.items.push(e)),console.log("[addItem] Current items array:",this.items),console.log("[addItem] Calling saveToStorage..."),this.saveToStorage(),console.log("[addItem] saveToStorage finished."),console.log("[addItem] Calling renderCartCount..."),this.renderCartCount(),console.log("[addItem] renderCartCount finished."),document.querySelector(".cart-section")&&(console.log("[addItem] On cart page, calling renderCartItems and updateCartSummary."),this.renderCartItems(),this.updateCartSummary()),console.log("[addItem] Function finished.")},removeItem:function(e){this.items=this.items.filter(t=>t.id!==e),this.saveToStorage(),this.renderCartCount(),document.querySelector(".cart-section")&&(this.renderCartItems(),this.updateCartSummary())},updateQuantity:function(e,t){const n=this.items.find(i=>i.id===e);n&&(n.quantity=Math.max(1,t),this.saveToStorage(),document.querySelector(".cart-section")&&(this.renderCartItems(),this.updateCartSummary()))},renderCartCount:function(){const e=document.querySelectorAll(".cart-count:not(slimmer-navbar .cart-count)"),t=this.items.reduce((i,a)=>i+a.quantity,0);e.forEach(i=>{i.textContent=t,i.style.display=t>0?"flex":"none"});const n=document.querySelector("slimmer-navbar");n&&(n.setAttribute("cart-count",t.toString()),console.log(`Navbar cart-count attribuut bijgewerkt naar: ${t}`))},renderCartItems:function(){const e=document.getElementById("cart-items");if(!e){console.log("cart-items container niet gevonden");return}if(console.log("Renderen van winkelwagen items:",this.items.length),e.innerHTML="",this.items.length===0){e.innerHTML=`
                <div class="empty-cart-message">
                    <p>Je winkelwagen is leeg</p>
                    <a href="/tools" class="btn btn-primary">Bekijk Tools</a>
                    <a href="/e-learnings" class="btn btn-outline">Bekijk Cursussen</a>
                </div>
            `;return}this.items.forEach(t=>{const n=document.createElement("div");n.className="cart-item",n.innerHTML=`
                <div class="cart-item-image">
                    <img src="${t.img}" alt="${t.name}">
                </div>
                <div class="cart-item-details">
                    <h3>${t.name}</h3>
                    <span class="product-type">${t.type}</span>
                    <div class="quantity-controls">
                        <button class="quantity-btn decrease" data-item-id="${t.id}">-</button>
                        <span class="quantity">${t.quantity}</span>
                        <button class="quantity-btn increase" data-item-id="${t.id}">+</button>
                    </div>
                </div>
                <div class="cart-item-price">
                    <span>€${(t.price*t.quantity).toFixed(2).replace(".",",")}</span>
                    <button class="remove-item-btn" data-item-id="${t.id}">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M18 6L6 18"></path>
                            <path d="M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            `,e.appendChild(n)}),this.addCartItemEventListeners()},addCartItemEventListeners:function(){document.querySelectorAll(".remove-item-btn").forEach(e=>{e.addEventListener("click",function(){const t=this.getAttribute("data-item-id");o.removeItem(t)})}),document.querySelectorAll(".quantity-btn.increase").forEach(e=>{e.addEventListener("click",function(){const t=this.getAttribute("data-item-id"),n=o.items.find(i=>i.id===t);n&&o.updateQuantity(t,n.quantity+1)})}),document.querySelectorAll(".quantity-btn.decrease").forEach(e=>{e.addEventListener("click",function(){const t=this.getAttribute("data-item-id"),n=o.items.find(i=>i.id===t);n&&n.quantity>1&&o.updateQuantity(t,n.quantity-1)})})},updateCartSummary:function(){const e=document.getElementById("cart-subtotal"),t=document.getElementById("cart-tax"),n=document.getElementById("cart-total"),i=document.getElementById("checkout-btn");if(!e||!t||!n)return;const a=this.items.reduce((c,l)=>c+l.price*l.quantity,0),s=a-a/1.21,r=a-s;e.textContent=`€${r.toFixed(2).replace(".",",")}`,t.textContent=`€${s.toFixed(2).replace(".",",")}`,n.textContent=`€${a.toFixed(2).replace(".",",")}`,i&&(this.items.length>0?i.disabled=!1:i.disabled=!0)},checkout:function(){alert("Je wordt doorgestuurd naar de betaalpagina..."),this.items=[],this.saveToStorage(),this.renderCartCount(),this.renderCartItems(),this.updateCartSummary()},clearCart:function(){if(confirm("Weet je zeker dat je de winkelwagen wilt leegmaken?")&&(this.items=[],this.saveToStorage(),this.renderCartCount(),document.querySelector(".cart-section"))){this.renderCartItems(),this.updateCartSummary();const e=document.getElementById("checkout-btn");e&&(e.disabled=!0),showNotification("Je winkelwagen is leeggemaakt.","info")}},resetCart:function(e=!0){this.items=[],this.saveToStorage(),this.renderCartCount(),document.querySelector(".cart-section")&&(this.renderCartItems(),this.updateCartSummary()),e&&(console.log("Winkelwagen is volledig gereset"),typeof showNotification=="function"&&showNotification("Winkelwagen is gereset.","info"))},getItems:function(){return this.items},calculateTotal:function(){const e=this.items.reduce((t,n)=>t+n.price*n.quantity,0);return console.log("[Cart.calculateTotal] Calculated total:",e),e},getTotalWithTax:function(){const e=this.calculateTotal(),t=e*.21;return e+t}};window.Cart=o;typeof global<"u"&&(global.Cart=o);document.addEventListener("DOMContentLoaded",()=>{console.log("[Cart] DOMContentLoaded - Starting auto-initialization..."),o.init(),console.log("[Cart] Auto-initialization completed.")});document.readyState==="loading"?console.log("[Cart] Document still loading, will wait for DOMContentLoaded"):(console.log("[Cart] Document already loaded, initializing immediately"),o.init());window.addEventListener("load",()=>{console.log("[Cart] Window load event - ensuring cart is initialized..."),o.initialized||(console.log("[Cart] Cart was not initialized yet, doing it now..."),o.init(!0))});setTimeout(()=>{console.log("[Cart] Timeout fallback - ensuring cart is initialized..."),o.initialized||(console.log("[Cart] Cart was not initialized yet via timeout, doing it now..."),o.init(!0))},1e3);
